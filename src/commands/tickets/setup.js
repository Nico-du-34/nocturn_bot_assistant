const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, PermissionFlagsBits } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('ticket')
        .setDescription('Configure le syst√®me de tickets')
        .addSubcommand(subcommand =>
            subcommand
                .setName('setup')
                .setDescription('Configure le syst√®me de tickets')
                .addChannelOption(option =>
                    option.setName('category')
                        .setDescription('Cat√©gorie o√π cr√©er les tickets')
                        .setRequired(true))
                .addChannelOption(option =>
                    option.setName('log_channel')
                        .setDescription('Canal pour les logs des tickets')
                        .setRequired(false))
                .addRoleOption(option =>
                    option.setName('support_role')
                        .setDescription('R√¥le du support')
                        .setRequired(false)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('panel')
                .setDescription('Cr√©e un panel de tickets')
                .addChannelOption(option =>
                    option.setName('channel')
                        .setDescription('Canal o√π cr√©er le panel')
                        .setRequired(true))),

    permissions: [PermissionFlagsBits.ManageGuild],

    async execute(interaction, client) {
        const subcommand = interaction.options.getSubcommand();

        if (subcommand === 'setup') {
            await setupTickets(interaction, client);
        } else if (subcommand === 'panel') {
            await createTicketPanel(interaction, client);
        }
    }
};

/**
 * Configure le syst√®me de tickets
 * @param {CommandInteraction} interaction - L'interaction de commande
 * @param {Client} client - Le client Discord
 */
async function setupTickets(interaction, client) {
    const category = interaction.options.getChannel('category');
    const logChannel = interaction.options.getChannel('log_channel');
    const supportRole = interaction.options.getRole('support_role');

    try {
        // V√©rifier que la cat√©gorie est bien une cat√©gorie
        if (category.type !== 4) {
            return interaction.reply({
                content: '‚ùå Le canal s√©lectionn√© doit √™tre une cat√©gorie.',
                ephemeral: true
            });
        }

        // Mettre √† jour la configuration dans la base de donn√©es
        await client.database.run(
            `UPDATE guilds SET 
                ticket_category = ?, 
                ticket_log_channel = ?,
                ticket_role = ?
             WHERE id = ?`,
            [
                category.id,
                logChannel?.id || null,
                supportRole?.id || null,
                interaction.guildId
            ]
        );

        const setupEmbed = new EmbedBuilder()
            .setColor(0x00FF00)
            .setTitle('‚úÖ Configuration des Tickets')
            .setDescription('Le syst√®me de tickets a √©t√© configur√© avec succ√®s!')
            .addFields(
                { 
                    name: 'üìÅ Cat√©gorie', 
                    value: category.name, 
                    inline: true 
                },
                { 
                    name: 'üìù Logs', 
                    value: logChannel ? logChannel.name : 'Non configur√©', 
                    inline: true 
                },
                { 
                    name: 'üë• R√¥le Support', 
                    value: supportRole ? supportRole.name : 'Non configur√©', 
                    inline: true 
                }
            )
            .setFooter({ 
                text: `Configur√© par ${interaction.user.tag}`,
                iconURL: interaction.user.displayAvatarURL({ dynamic: true })
            })
            .setTimestamp();

        await interaction.reply({ embeds: [setupEmbed] });

    } catch (error) {
        console.error('‚ùå Erreur lors de la configuration des tickets:', error);
        await interaction.reply({
            content: '‚ùå Erreur lors de la configuration des tickets.',
            ephemeral: true
        });
    }
}

/**
 * Cr√©e un panel de tickets
 * @param {CommandInteraction} interaction - L'interaction de commande
 * @param {Client} client - Le client Discord
 */
async function createTicketPanel(interaction, client) {
    const channel = interaction.options.getChannel('channel');

    // V√©rifier que le canal est un canal textuel
    if (channel.type !== 0) {
        return interaction.reply({
            content: '‚ùå Le canal s√©lectionn√© doit √™tre un canal textuel.',
            ephemeral: true
        });
    }

    try {
        const panelEmbed = new EmbedBuilder()
            .setColor(0x0099FF)
            .setTitle('üé´ Syst√®me de Tickets')
            .setDescription('Bienvenue dans notre syst√®me de tickets!\n\nCliquez sur le bouton ci-dessous pour cr√©er un ticket de support.\n\n**Cat√©gories disponibles:**\n‚Ä¢ üõ†Ô∏è Support G√©n√©ral\n‚Ä¢ üêõ Signalement de Bug\n‚Ä¢ üí° Suggestion\n‚Ä¢ üîê Probl√®me de Compte')
            .addFields(
                { 
                    name: 'üìã Instructions', 
                    value: '1. Cliquez sur le bouton "Cr√©er un Ticket"\n2. S√©lectionnez la cat√©gorie appropri√©e\n3. D√©crivez votre probl√®me\n4. Un membre du staff vous r√©pondra rapidement', 
                    inline: false 
                },
                { 
                    name: '‚è∞ Temps de R√©ponse', 
                    value: 'Notre √©quipe s\'efforce de r√©pondre dans les plus brefs d√©lais (g√©n√©ralement moins de 24h).', 
                    inline: false 
                }
            )
            .setFooter({ 
                text: `${interaction.guild.name} ‚Ä¢ Support`,
                iconURL: interaction.guild.iconURL({ dynamic: true })
            })
            .setTimestamp();

        // Cr√©er les boutons
        const row1 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('ticket_create_support')
                    .setLabel('üõ†Ô∏è Support G√©n√©ral')
                    .setStyle(ButtonStyle.Primary),
                new ButtonBuilder()
                    .setCustomId('ticket_create_bug')
                    .setLabel('üêõ Signalement de Bug')
                    .setStyle(ButtonStyle.Danger)
            );

        const row2 = new ActionRowBuilder()
            .addComponents(
                new ButtonBuilder()
                    .setCustomId('ticket_create_suggestion')
                    .setLabel('üí° Suggestion')
                    .setStyle(ButtonStyle.Success),
                new ButtonBuilder()
                    .setCustomId('ticket_create_account')
                    .setLabel('üîê Probl√®me de Compte')
                    .setStyle(ButtonStyle.Secondary)
            );

        await channel.send({
            embeds: [panelEmbed],
            components: [row1, row2]
        });

        await interaction.reply({
            content: `‚úÖ Panel de tickets cr√©√© dans ${channel}!`,
            ephemeral: true
        });

    } catch (error) {
        console.error('‚ùå Erreur lors de la cr√©ation du panel de tickets:', error);
        await interaction.reply({
            content: '‚ùå Erreur lors de la cr√©ation du panel de tickets.',
            ephemeral: true
        });
    }
} 