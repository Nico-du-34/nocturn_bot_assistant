const { REST, Routes } = require('discord.js');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

const commands = [];
const commandsPath = path.join(__dirname, 'commands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

// Charger toutes les commandes
for (const file of commandFiles) {
    const filePath = path.join(commandsPath, file);
    const command = require(filePath);
    
    if ('data' in command && 'execute' in command) {
        commands.push(command.data.toJSON());
        console.log(`‚úÖ Commande charg√©e: ${command.data.name}`);
    } else {
        console.log(`‚ö†Ô∏è  Commande ignor√©e: ${filePath} - manque de propri√©t√©s requises`);
    }
}

// Configuration du REST
const rest = new REST().setToken(process.env.BOT_TOKEN);

// Fonction pour d√©ployer les commandes
async function deployCommands() {
    try {
        console.log(`üöÄ D√©ploiement de ${commands.length} commandes...`);

        // D√©ployer globalement (prend jusqu'√† 1 heure pour se propager)
        const data = await rest.put(
            Routes.applicationCommands(process.env.CLIENT_ID),
            { body: commands },
        );

        console.log(`‚úÖ ${data.length} commandes d√©ploy√©es avec succ√®s!`);
        
        // Afficher les commandes d√©ploy√©es
        console.log('\nüìã Commandes d√©ploy√©es:');
        data.forEach(cmd => {
            console.log(`  - /${cmd.name}: ${cmd.description}`);
        });

    } catch (error) {
        console.error('‚ùå Erreur lors du d√©ploiement:', error);
    }
}

// Fonction pour d√©ployer sur un serveur sp√©cifique (plus rapide pour les tests)
async function deployGuildCommands() {
    try {
        console.log(`üöÄ D√©ploiement de ${commands.length} commandes sur le serveur...`);

        const data = await rest.put(
            Routes.applicationGuildCommands(process.env.CLIENT_ID, process.env.GUILD_ID),
            { body: commands },
        );

        console.log(`‚úÖ ${data.length} commandes d√©ploy√©es sur le serveur avec succ√®s!`);
        
        // Afficher les commandes d√©ploy√©es
        console.log('\nüìã Commandes d√©ploy√©es:');
        data.forEach(cmd => {
            console.log(`  - /${cmd.name}: ${cmd.description}`);
        });

    } catch (error) {
        console.error('‚ùå Erreur lors du d√©ploiement:', error);
    }
}

// Fonction pour supprimer toutes les commandes
async function deleteAllCommands() {
    try {
        console.log('üóëÔ∏è  Suppression de toutes les commandes...');

        await rest.put(
            Routes.applicationCommands(process.env.CLIENT_ID),
            { body: [] },
        );

        console.log('‚úÖ Toutes les commandes supprim√©es!');

    } catch (error) {
        console.error('‚ùå Erreur lors de la suppression:', error);
    }
}

// Ex√©cuter selon l'argument pass√©
const action = process.argv[2];

switch (action) {
    case 'global':
        deployCommands();
        break;
    case 'guild':
        deployGuildCommands();
        break;
    case 'delete':
        deleteAllCommands();
        break;
    default:
        console.log('Usage: node deploy-commands.js [global|guild|delete]');
        console.log('  global: D√©ployer globalement (recommand√© pour la production)');
        console.log('  guild:  D√©ployer sur le serveur sp√©cifique (recommand√© pour les tests)');
        console.log('  delete: Supprimer toutes les commandes');
        break;
} 